package com.ankit.reflection;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class MainClass {

	public static void main(String[] args) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException, InstantiationException {
		Person p = new Person();
		p.setAddress(new Address(100,"BAPU NAGAR","380023"));
		p.setPersonId(1);
		p.setPersonName("Ankit");
		Class cls = p.getClass();
		System.out.println(cls.getName());
		System.out.println(p.getAddress().getAddressName());
		System.out.println(p.getPersonName());
		Method[] methods = cls.getMethods();
		 for (Method method:methods){
			 if(method.getName().startsWith("get") && !method.getName().startsWith("getClass")){
	            //System.out.println(method.getName());
	            try {
					Method declaredGetMethod = cls.getDeclaredMethod(method.getName());
					Method declaredSetMethod = cls.getDeclaredMethod("set"+method.getName().substring(3, method.getName().length()), declaredGetMethod.getReturnType());
					Class mClass = declaredGetMethod.getReturnType();
					declaredSetMethod.invoke(p,getObject(mClass));
					System.out.println(declaredGetMethod);
					System.out.println(declaredSetMethod);
					
				} catch (NoSuchMethodException e) {
					
					e.printStackTrace();
				} catch (SecurityException e) {
					
					e.printStackTrace();
				}
			 }
		 }
		 System.out.println(p.getPersonName());
	}
	public static Object getObject(Class clazz) throws InstantiationException, IllegalAccessException{
		Object obj = null;
		if(String.class == clazz)  return obj="NEW STRING VAL";
		else if(Boolean.class == clazz)  return obj=true;
		else if(boolean.class == clazz)  return obj=true;
		else if(Integer.class == clazz)  return obj=101;
		else if(int.class == clazz)  return obj=101;
		else return (Object) clazz.newInstance();
	}

}
